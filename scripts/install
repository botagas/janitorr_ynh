#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS AND COMMON FUNCTIONS
#=================================================
source /usr/share/yunohost/helpers
source _common.sh

#=================================================
# DIR AND VARS
#=================================================
ynh_script_progression "Setting up directory and variables..."

ynh_setup_source --dest_dir="$install_dir" --source_id="main"
ynh_setup_source --dest_dir="$install_dir/jdk" --source_id="jdk"
env_string="env PATH=$install_dir/jdk/bin:$PATH JAVA_HOME=$install_dir/jdk GRADLE_USER_HOME=$install_dir/.gradle"

ynh_print_info "Setting up variables..."
# Find service API keys and ports
if ls /etc/yunohost/apps | grep -q "radarr"; then
        radarr_port=$(ynh_app_setting_get --app radarr --key port)
        radarr_url="http://127.0.0.1:$radarr_port"
        radarr_api_key=$(ynh_app_setting_get --app radarr --key api_key)
else
        ynh_print_warn "Couldn't find Radarr port and api_key..."
fi
if ls /etc/yunohost/apps | grep -q "sonarr"; then
        sonarr_port=$(ynh_app_setting_get --app sonarr --key port)
        sonarr_url="http://127.0.0.1:$sonarr_port"
        sonarr_api_key=$(ynh_app_setting_get --app sonarr --key api_key)
else
        ynh_print_warn "Couldn't find Sonarr port and api_key..."
fi
if ls /etc/yunohost/apps | grep -q "jellystat"; then
        jellystat_port=$(ynh_app_setting_get --app jellystat --key port)
        jellystat_url="http://127.0.0.1:$jellystat_port"
        jellystat_api_key=$(ynh_app_setting_get --app jellystat --key api_key)
else
        ynh_print_warn "Couldn't find Jellystat port and api_key..."
fi
if ls /etc/yunohost/apps | grep -q "jellyfin"; then
        jellyfin_port=$(ynh_app_setting_get --app jellyfin --key port)
        jellyfin_url="http://127.0.0.1:$jellyfin_port"
else
        ynh_print_warn "Couldn't find Jellyfin port and api_key..."
fi
if ls /etc/yunohost/apps | grep -q "jellyseerr"; then
        jellyseerr_port=$(ynh_app_setting_get --app jellyseerr --key port)
        jellyseerr_url="http://127.0.0.1:$jellyseerr_port"
        jellyseerr_api_key=$(ynh_app_setting_get --app jellyseerr --key api_key)
        jellyfin_api_key=$(ynh_hide_warnings curl --silent --show-error --fail -X GET http://127.0.0.1:$jellyseerr_port/api/v1/settings/jellyfin -H "accept: application/json" -H "X-Api-Key: $jellyseerr_api_key" | jq -r '.apiKey')

else
        ynh_print_warn "Couldn't find Jellyseerr port and api_key..."
fi

# Save user inputs from manifest into app settings
ynh_app_setting_set --app=$app --key=jellyfin_url --value="$jellyfin_url"
ynh_app_setting_set --app=$app --key=jellyfin_api_key --value="$jellyfin_api_key"
ynh_app_setting_set --app=$app --key=jellyfin_username --value="$jellyfin_username"
ynh_app_setting_set --app=$app --key=jellyfin_password --value="$jellyfin_password"
ynh_app_setting_set --app=$app --key=leaving_soon_dir --value="$leaving_soon_dir"
ynh_app_setting_set --app=$app --key=media_server_leaving_soon_dir --value="$media_server_leaving_soon_dir"
ynh_app_setting_set --app=$app --key=free_space_check_dir --value="$free_space_check_dir"
ynh_app_setting_set --app=$app --key=dry_run --value="$dry_run"
ynh_app_setting_set --app=$app --key=whole_tv_show --value="$whole_tv_show"
ynh_app_setting_set --app=$app --key=whole_show_seeding_check --value="$whole_show_seeding_check"
ynh_app_setting_set --app=$app --key=leaving_soon --value="$leaving_soon"
ynh_app_setting_set --app=$app --key=exclusion_tag --value="$exclusion_tag"
ynh_app_setting_set --app=$app --key=jellyfin_usage --value="$jellyfin_usage"
ynh_app_setting_set --app=$app --key=jellyseerr_usage --value="$jellyseerr_usage"
ynh_app_setting_set --app=$app --key=jellystat_usage --value="$jellystat_usage"
ynh_app_setting_set --app=$app --key=radarr_usage --value="$radarr_usage"
ynh_app_setting_set --app=$app --key=sonarr_usage --value="$sonarr_usage"
ynh_app_setting_set --app=$app --key=radarr_url --value="$radarr_url"
ynh_app_setting_set --app=$app --key=radarr_api_key --value="$radarr_api_key"
ynh_app_setting_set --app=$app --key=sonarr_url --value="$sonarr_url"
ynh_app_setting_set --app=$app --key=sonarr_api_key --value="$sonarr_api_key"
ynh_app_setting_set --app=$app --key=jellyseerr_url --value="$jellyseerr_url"
ynh_app_setting_set --app=$app --key=jellyseerr_api_key --value="$jellyseerr_api_key"
ynh_app_setting_set --app=$app --key=jellystat_url --value="$jellystat_url"
ynh_app_setting_set --app=$app --key=jellystat_api_key --value="$jellystat_api_key"

#=================================================
# ACCESS AND CONFIG
#=================================================
ynh_script_progression "Starting setup process for access and config..."

# Add Janitorr to the multimedia group
ynh_print_info "Adding Janitorr to multimedia group..."

# Build YunoHost multimedia directories
ynh_multimedia_build_main_dir
# Enable writing into these directories
ynh_multimedia_addaccess $app

# Create multimedia directories
ynh_print_info "Creating necessary directories..."
mkdir -p "/home/yunohost.multimedia/share/leavingsoon"

# Create application.yml using a template
ynh_print_info "Generating application.yml..."
cat > "$install_dir/src/main/resources/application.yml" <<EOL
server:
  port: $port

logging:
  level:
    com.github.schaka: INFO
  threshold:
    file: NONE # Set to TRACE to enable file logging

file-system:
  access: true
  validate-seeding: true
  leaving-soon-dir: "$leaving_soon_dir"
  media-server-leaving-soon-dir: "$media_server_leaving_soon_dir"
  from-scratch: true
  free-space-check-dir: "$free_space_check_dir"

application:
  dry-run: $dry_run
  run-once: false
  whole-tv-show: $whole_tv_show
  whole-show-seeding-check: $whole_show_seeding_check
  leaving-soon: $leaving_soon
  exclusion-tag: "$exclusion_tag"

  media-deletion:
    enabled: true
    movie-expiration:
      5: $leaving_soon
      10: $leaving_soon
      15: $leaving_soon
      20: 120d 
    season-expiration:
      5: $leaving_soon
      10: $leaving_soon
      15: $leaving_soon 
      20: 120d 

  tag-based-deletion:
    enabled: false
    minimum-free-disk-percent: 100
    schedules:
      - tag: 5 - demo
        expiration: 30d
      - tag: 10 - demo
        expiration: 7d

  episode-deletion: # This ignores Jellystat. Only grab history matters. It also doesn't clean up Jellyfin. There is NO seeding check either.
    enabled: false
    tag: janitorr_daily # Shows tagged with this will have all episodes of their LATEST season deleted by the below thresholds
    max-episodes: 10 # maximum (latest) episodes of this season to keep
    max-age: 30d # Maximum age to keep any episode at all - even the last 10 episodes would expire after 30 days in this example

clients:
  jellyfin:
    enabled: $jellyfin_usage
    url: "$jellyfin_url"
    api-key: "$jellyfin_api_key"
    username: "$jellyfin_username"
    password: "$jellyfin_password"
    delete: true
    leaving-soon-tv: "Shows (Leaving Soon)"
    leaving-soon-movies: "Movies (Leaving Soon)"
  emby:
    enabled: false
    url: "http://localhost:8096"
    api-key: "4da8d93992804489ba2d1f0e31b8316c"
    username: Janitorr
    password: janitorr
    delete: true # Emby setup is required for JellyStat. However, if you don't want Janitorr to send delete requests to the Emby API, disable it here
    leaving-soon-tv: "Shows (Leaving Soon)"
    leaving-soon-movies: "Movies (Leaving Soon)"
  radarr:
    enabled: $radarr_usage
    url: "$radarr_url"
    api-key: "$radarr_api_key"
    only-delete-files: false
  sonarr:
    enabled: $sonarr_usage
    url: "$sonarr_url"
    api-key: "$sonarr_api_key"
    delete-empty-shows: true
    determine-age-by: most_recent
  bazarr:
    enabled: false # Only used if you want to copy over subtitle files managed by Bazarr
    url: "http://localhost:6767"
    api-key: "cd0912f129d348c9b69bb20d49fcbe55"

  jellyseerr:
    enabled: $jellyseerr_usage
    url: "$jellyseerr_url"
    api-key: "$jellyseerr_api_key"
    match-server: false
  jellystat:
    enabled: $jellystat_usage
    url: "$jellystat_url"
    api-key: "$jellystat_api_key"
EOL

#=================================================
# EXECUTABLE AND SYSTEM CONF SETUP
#=================================================
ynh_script_progression "Setting up the app executable and system configs..."

ynh_print_info "Downloading Janitorr JAR..."
ynh_hide_warnings wget -O "$install_dir/janitorr.jar" "https://github.com/botagas/janitorr_ynh/releases/download/latest/janitorr-master.jar"
chown -R "$app:$app" "$install_dir"

ynh_print_info "Adding systemd service..."
yunohost service add "$app" --description="Janitorr cleanup service"
ynh_config_add_systemd

# ynh_print_info "Adding nginx configuration..."
# ynh_config_add_nginx

ynh_print_info "Starting service..."
ynh_systemctl --service="$app" --action="start"

ynh_script_progression "Installation completed!"
